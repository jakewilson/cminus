prog                 -> declaration_list
declaration_list     -> declaration_list declaration | declaration
declaration          -> var_declaration | func_declaration
var_declaration      -> type_specifier ID; | type_specifier ID[NUM];
type_specifier       -> INT | VOID | FLOAT
func_declaration     -> type_specifier ID ( params ) compound_statement
params               -> param_list | VOID
param_list           -> param_list , param | param
param                -> type_specifier ID | type_specifier ID [ ]
compound_statement   -> { local_declarations statement_list }
local_declarations   -> local_declarations var_declaration | EMPTY
statement_list       -> statement_list statement | EMPTY
statement            -> expression_statement | compound_statement | selection_statement | iteration_statement | return_statement
expression_statement -> expression ; | ;
selection_statement  -> IF ( expression ) statement | IF ( expression ) statement ELSE statement
iteration_statement  -> WHILE ( expression ) statement
return_statement     -> RETURN ; | RETURN expression ;
expression           -> var = expression | simple_expression
var                  -> ID | ID [ expression ]
simple_expression    -> additive_expression relop additive_expression | additive_expression
relop                -> <= | < | > | >= | == | !=
additive_expression  -> additive_expression addop term | term
addop                -> + | -
term                 -> term mulop factor | factor
mulop                -> * | /
factor               -> ( expression ) | var | call | NUM
call                 -> ID ( args )
args                 -> args_list | EMPTY
args_list            -> args_list , expression | expression


